name: Android CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Prevent hanging builds

    strategy:
      matrix:
        build-type: [debug, release]
      fail-fast: false  # Continue other builds if one fails

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better caching

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/configuration-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Setup Gradle properties for CI
      run: |
        mkdir -p ~/.gradle
        echo "org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m -XX:+HeapDumpOnOutOfMemoryError" >> ~/.gradle/gradle.properties
        echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.caching=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.configureondemand=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
        echo "android.useAndroidX=true" >> ~/.gradle/gradle.properties
        echo "android.enableJetifier=true" >> ~/.gradle/gradle.properties

    - name: Show build environment info
      run: |
        echo "Java version:"
        java -version
        echo "Gradle wrapper version:"
        ./gradlew --version
        echo "Android SDK info:"
        echo $ANDROID_HOME
        echo "Available build tools:"
        ls -la $ANDROID_HOME/build-tools/ || echo "Build tools directory not found"
        echo "Project structure:"
        find . -name "*.gradle*" -o -name "AndroidManifest.xml" | head -10

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v2

    - name: Resolve dependencies
      run: |
        echo "Pre-downloading dependencies to improve build reliability..."
        ./gradlew dependencies --configuration releaseCompileClasspath --quiet || true
        ./gradlew dependencies --configuration debugCompileClasspath --quiet || true

    - name: Clean and prepare build
      run: |
        echo "Cleaning project for fresh build..."
        ./gradlew clean --stacktrace
        echo "Checking project structure..."
        find app/src/main -name "*.kt" | head -10
        echo "Checking layout files..."
        find app/src/main/res/layout -name "*.xml" | head -10

    - name: Run tests
      run: ./gradlew test --stacktrace --scan
      env:
        GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m"

    - name: Build ${{ matrix.build-type }} APK
      run: |
        echo "Starting build with detailed error reporting..."
        ./gradlew assemble${{ matrix.build-type == 'debug' && 'Debug' || 'Release' }} --stacktrace --info --scan 2>&1 | tee build-output.log
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "=== BUILD FAILED - Detailed Error Analysis ==="
          echo "Build output:"
          cat build-output.log
          echo ""
          echo "=== Kotlin Compilation Errors ==="
          find app/build -name "*.log" -exec echo "File: {}" \; -exec cat {} \; 2>/dev/null || true
          echo ""
          echo "=== Generated Files Check ==="
          find app/build/generated -name "*Binding.java" -o -name "*Binding.kt" | head -10 || true
          echo ""
          echo "=== ViewBinding Generation Check ==="
          ls -la app/build/generated/data_binding_base_class_source_out/ 2>/dev/null || echo "ViewBinding directory not found"
          exit 1
        fi
      env:
        GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m"

    - name: Upload ${{ matrix.build-type }} APK
      uses: actions/upload-artifact@v4
      with:
        name: grohon-pdf-reader-${{ matrix.build-type }}
        path: app/build/outputs/apk/${{ matrix.build-type }}/*.apk
        retention-days: 30

    - name: Upload build reports
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-reports-${{ matrix.build-type }}-${{ github.run_number }}
        path: |
          app/build/reports/
          app/build/outputs/logs/
          build/reports/
          ~/.gradle/daemon/
          gradle/wrapper/
        retention-days: 7
        if-no-files-found: ignore

    - name: Show build logs on failure
      if: failure()
      run: |
        echo "=== Build Environment ==="
        echo "Java version: $(java -version 2>&1)"
        echo "Gradle version: $(./gradlew --version | head -3)"
        echo "Android SDK: $ANDROID_HOME"
        echo "Available memory: $(free -h)"
        echo "Disk space: $(df -h)"
        echo ""
        echo "=== Gradle daemon logs ==="
        find ~/.gradle/daemon -name "*.log" -exec echo "File: {}" \; -exec cat {} \; 2>/dev/null || echo "No daemon logs found"
        echo ""
        echo "=== Build reports ==="
        find . -name "*.log" -path "*/build/*" -exec echo "File: {}" \; -exec cat {} \; 2>/dev/null || echo "No build logs found"
        echo ""
        echo "=== Compilation errors ==="
        find . -name "*.txt" -path "*/build/tmp/*" -exec echo "File: {}" \; -exec cat {} \; 2>/dev/null || echo "No compilation logs found"
        echo ""
        echo "=== Last 100 lines of build output ==="
        tail -100 ~/.gradle/daemon/*/daemon-*.out.log 2>/dev/null || echo "No daemon output found"

  release:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release APK
      uses: actions/download-artifact@v4
      with:
        name: grohon-pdf-reader-release
        path: ./apk

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        files: ./apk/*.apk
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}